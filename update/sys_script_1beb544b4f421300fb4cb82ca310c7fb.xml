<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>true</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_228286_hpe_onesp_onesphere_project</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_228286_hpe_onesp_onesphere_project">request_state=Approved^EQ<item endquery="false" field="request_state" goto="false" newquery="false" operator="=" or="false" value="Approved"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message><![CDATA[<p>Hi business rule</p>]]></message>
        <name>ApprovalGan</name>
        <order>1001</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions>x_228286_hpe_onesp.onesphere_project_approver</role_conditions>
        <script><![CDATA[function trimStr(str) {
  if(str == null) return str;
  return str.replace(/^\s+|\s+$/g, '');
}

function getAuthToken(){
               try {
                              var Session_request = new sn_ws.RESTMessageV2();
        Session_request.setHttpMethod('post');
        Session_request.setEndpoint('https://gandharva.dev.hpedevops.net/rest/session');
        Session_request.setRequestHeader("Content-Type","application/json");
                              var body = '{"username":"gandharvas@hpe.com","password":"Procurve@123"}';
        Session_request.setRequestBody(body);

                              var Auth_response = Session_request.execute();
                              var httpResponseStatus = Auth_response.getStatusCode();
                              var responseBody = Auth_response.getBody();
                              session = JSON.parse(responseBody);
               }
    catch (ex) {
        var message = ex.getMessage();
        gs.debug(message);
    }
               return session.token;
}

function createProject(authToken, current){
               try {
                   var Projrequest = new sn_ws.RESTMessageV2();
        Projrequest.setHttpMethod('post');
        Projrequest.setEndpoint('https://gandharva.dev.hpedevops.net/rest/projects');
        Projrequest.setRequestHeader("Content-Type","application/json");
        Projrequest.setRequestHeader("Authorization", String(authToken));
        project_name = '\"'+ current.project_name +'\"';
        var body = '{"description": "string1", "name": '+project_name+',"tagUris": ["/rest/tags/environment=development", "/rest/tags/line-of-business=incubation", "/rest/tags/tier=gold"]}';
                              Projrequest.setRequestBody(body);
                              var response = Projrequest.execute();
                              var responseBody = response.getBody();
                              project = JSON.parse(responseBody);
               }
               catch (ex) {
        var message = ex.getMessage();
        gs.debug(message);
    }
               return project;
}

function getUsers(authToken){
               try{
                              //Get the user list
                              var userRequest = new sn_ws.RESTMessageV2();
                              userRequest.setHttpMethod('get');
                              userRequest.setEndpoint('https://gandharva.dev.hpedevops.net/rest/users');
                              userRequest.setRequestHeader("Content-Type","application/json");
                              userRequest.setRequestHeader("Authorization", authToken);
                              var userGetResponse = userRequest.execute();
                              var userResponseBody = userGetResponse.getBody();
                              users = JSON.parse(userResponseBody);
               }
               catch (ex) {
        var message = ex.getMessage();
        gs.debug(message);
    }
               return users;
}

function getMembershipRoleUris(authToken){
               // Script to Get membership roles of Project Owner/User
               try{
                              var memberRequest = new sn_ws.RESTMessageV2();
                              memberRequest.setHttpMethod('get');
                              memberRequest.setEndpoint('https://gandharva.dev.hpedevops.net/rest/membership-roles');
                              memberRequest.setRequestHeader("Content-Type","application/json");
                              memberRequest.setRequestHeader("Authorization", authToken);

                              var response = memberRequest.execute();
                              var responseBody = response.getBody();
                              rolesUris= JSON.parse(responseBody);
                 }
               catch (ex) {
                              gs.info("error while getting Membership Role Uris");
                              }
               return rolesUris;
}

function createUser(authToken, name, email, role){
               try{
                              //Get the user list
                              var userRequest = new sn_ws.RESTMessageV2();
                              userRequest.setHttpMethod('post');
                              userRequest.setEndpoint('https://gandharva.dev.hpedevops.net/rest/users');
                              userRequest.setRequestHeader("Content-Type","application/json");
                              userRequest.setRequestHeader("Authorization", authToken);
                              var userBody = '{"name": '+name+', "email": '+email+', "password": "Procurve@123", "role": '+role+'}';
                              userRequest.setRequestBody(userBody);
                              var userResponse = userRequest.execute();
                              var userResponseBody = userResponse.getBody();
                              response = JSON.parse(userResponseBody);
               }
               catch (ex) {
        var message = ex.getMessage();
        gs.debug(message);
    }
               return response;
}

function passwordReset(authToken, email){
               try{
                              //Get the user list
                              var passwordResetRequest = new sn_ws.RESTMessageV2();
                              passwordResetRequest.setHttpMethod('post');
                              passwordResetRequest.setEndpoint('https://gandharva.dev.hpedevops.net/rest/password-reset');
                              passwordResetRequest.setRequestHeader("Content-Type","application/json");
                              passwordResetRequest.setRequestHeader("Authorization", authToken);
                              var body = '{"email": '+email+'}';
                              passwordResetRequest.setRequestBody(body);
                              var response = passwordResetRequest.execute();
                              userResponseStatus = response.getStatusCode();
               }
               catch (ex) {
					var message = ex.getMessage();
					gs.debug(message);
				}
               return userResponseStatus;
}

function processUser(authToken, name, email, role){
               // Get Existing Users
               users = getUsers(authToken);
               createUserFlag = true;
               for (var j=0; j<users.members.length; j++){
                              member= users.members[j];
                              if (email == '\"'+member.email+'\"'){
                                             user = member;
                                             createUserFlag = false;
                              }
               }
               if (createUserFlag == true){
                              // Create user with specific role
                              user = createUser(authToken, name, email,  '\"'+role+ '\"');
                              // Password Reset Mail is sent for the newly created user
                              passwordReset(authToken, email);
               }
               return user;
}

function addUserToProject(authToken, projectUri, projectMemberUri, userUri){
               try{
                              //Get the user list
                              var memberRequest = new sn_ws.RESTMessageV2();
                              memberRequest.setHttpMethod('post');
                              memberRequest.setEndpoint('https://gandharva.dev.hpedevops.net/rest/memberships');
                              memberRequest.setRequestHeader("Content-Type","application/json");
                              memberRequest.setRequestHeader("Authorization", authToken);
                              var memberRequestBody = '{"membershipRoleUri":'+projectMemberUri+', "projectUri": '+projectUri+', "userUri": '+userUri+'}';
                              memberRequest.setRequestBody(memberRequestBody);
                              var memberResponse = memberRequest.execute();
                              var memberResponseBody = memberResponse.getBody();
                              response = JSON.parse(memberResponseBody);
               }
               catch (ex) {
        var message = ex.getMessage();
        gs.debug(message);
    }
               return response;
}

(function executeRule(current, previous /*null when async*/) {
    // Get Authorization 
               try{
                              // Get Auth Token
                              authToken = getAuthToken();
                              // Create project
                              project = createProject(authToken, current);
                              
                              // Get Membership Role Uris for Project Owner and Project Member
                              rolesUris = getMembershipRoleUris(authToken);
                              for(var i=0; i<rolesUris.members.length; i++){
                                             member = rolesUris.members[i];
                                             if (member.name == "project-owner"){
                                                            projectOwnerUri = member.uri;
                                             }
                                             if (member.name == "project-member"){
                                                            projectMemberUri = member.uri;
                                             }
                              }
                              var project_owner_email = current.project_owner.email;
                              var project_owner_name = current.project_owner.name;
                              
                              // Check whether Project Owner User is present, if not create a project owner user and 
                              // add that user as administrator and finally add that user to the created project
                              user = processUser(authToken, '\"'+project_owner_name+'\"', '\"'+project_owner_email+'\"', "administrator");
                              // TODO we need to check if the user is added to the project and then add that user
                              addUserToProject(authToken, '\"'+project.uri+'\"', '\"'+projectOwnerUri+'\"', '\"'+user.uri+'\"');
                              
                              var member_list = current.project_member.getDisplayValue();
                              var member_array = member_list.split(",");
                                                            
                              for(i = 0; i < member_array.length ; i++){
                                             //Fetch the User from table
                                             var sysUser1 = new GlideRecord('sys_user');
                                             gs.info(sysUser1.get('user_name',trimStr(member_array[i])));
                                             name = '\"' + sysUser1.getValue('name') +'\"';
                                             email = '\"'+ sysUser1.getValue('email')+'\"';
                                             
                                             // Check whether the project users already exist if not create them and
                                             // add those users to the project as consumer
                                             user = processUser(authToken, name, email, "consumer");
                                             // TODO we need to check if the user is added to the project and then add that user
                                             addUserToProject(authToken, '\"'+project.uri+'\"', '\"'+projectMemberUri+'\"', '\"'+user.uri+'\"');
                              }
               }
               catch (ex) {
        var message = ex.getMessage();
        gs.debug(message);
    }          
})(current, previous);
]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-05-17 18:28:24</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>1beb544b4f421300fb4cb82ca310c7fb</sys_id>
        <sys_mod_count>77</sys_mod_count>
        <sys_name>ApprovalGan</sys_name>
        <sys_overrides/>
        <sys_package display_value="HPE OneSphere" source="x_228286_hpe_onesp">2a7588ca4f421300fb4cb82ca310c76c</sys_package>
        <sys_policy/>
        <sys_scope display_value="HPE OneSphere">2a7588ca4f421300fb4cb82ca310c76c</sys_scope>
        <sys_update_name>sys_script_1beb544b4f421300fb4cb82ca310c7fb</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-05-21 14:51:19</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=1beb544b4f421300fb4cb82ca310c7fb"/>
</record_update>
